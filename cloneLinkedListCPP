/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/


/*
Approach 01 - Using a Ordered Map (extra space)
    1 - the map contains <node*,node*> i.e. the next and random pointer
    2 - it takes 2 passes (list elements copy, then, connections of copies)
    3 - traverse list and hash the nodes with a fresh node (of Node* type) with value of the copied node
    4 - traverse list again, do the connections of copy list as per the original list (below)
    5 - return the head/start of copy list i.e. hashMap[head]
    
                                                                    // Approach 1 starts

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==nullptr) return head; //edge case
        map<Node*,Node*> hashM;
        Node *temp = head;
        
        while(temp){
            hashM[temp] = new Node(temp->val);
            temp=temp->next;
        }
        
        Node *curr = head;
        while(curr){
            Node *copy = hashM[curr];
            copy->next = hashM[curr->next];
            copy->random = hashM[curr->random];
            curr = curr->next;
        }
        return hashM[head];
    }
};

                                                                        // Approach 1 ends
*/

/*
Approach 02 - Altering the original list and scraping the copied list
1 - insert new copies next to original nodes
2 - start again, connect copy.random as per originals
3 - scrape off the copies from the original list
*/


class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *iter = head; 
          Node *front = head;

          // First round: make copy of each node,
          // and link them together side-by-side in a single list.
          while (iter != NULL) {
            front = iter->next;

            Node *copy = new Node(iter->val);
            iter->next = copy;
            copy->next = front;

            iter = front;
          }

          // Second round: assign random pointers for the copy nodes.
          iter = head;
          while (iter != NULL) {
            if (iter->random != NULL) {
              iter->next->random = iter->random->next;
            }
            iter = iter->next->next;
          }

          // Third round: restore the original list, and extract the copy list.
          iter = head;
          Node *pseudoHead = new Node(0);
          Node *copy = pseudoHead;

          while (iter != NULL) {
            front = iter->next->next;

            // extract the copy
            copy->next = iter->next;

            // restore the original list
            iter->next = front;
              
            copy = copy -> next; 
            iter = front;
          }

          return pseudoHead->next;
    }
};
